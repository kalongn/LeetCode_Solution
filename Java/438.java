import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        // Create a list to find all anagrams in the string...
        List<Integer> output = new ArrayList<>();
        // Base case...
        if (s.length() < p.length()) return output;
        // Use map to record the count and beg and end pointers to track the windows...
        int[] hashmap = new int[128];
        // Record each character in p to hash
        for (char ch : p.toCharArray()) {
            hashmap[ch]++;
        }
        // Two pointers to track the window & initialize counter to p's length...
        int beg = 0, end = 0, counter = p.length();
        
        while (end < s.length()) {
            // Move end everytime, if the character exists in p's hash, decrease the counter...
            if (hashmap[s.charAt(end++)]-- > 0)     //current hash value > 0 means the character is existing in p string...
                counter--;
            // When the counter is down to 0 (means the end anagram is found), add beg to result list...
            if (counter == 0)
                output.add(beg);
            // If we find the window's size equals to p, then we have to move beg to find the new match window...
            // ++ to reset the hash because we kicked out the beg...
            // Increase the counter if the character is in p string...
            if (end - beg == p.length() && hashmap[s.charAt(beg++)]++ >= 0)     // >= 0 means it was original in the hash, because it won't go below 0
                counter++;
        }
        return output;      // Return the output result...
    }
}
